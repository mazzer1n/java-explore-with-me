DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS locations CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS compilations CASCADE;
DROP TABLE IF EXISTS compilation_events CASCADE;
DROP TABLE IF EXISTS requests CASCADE;

CREATE TABLE IF NOT EXISTS users (
                                     user_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                     name VARCHAR(250) UNIQUE NOT NULL,
    email VARCHAR(254) NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (user_id)
    );

CREATE TABLE IF NOT EXISTS categories (
                                          category_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                          name VARCHAR(50) UNIQUE NOT NULL,
    CONSTRAINT pk_categories PRIMARY KEY (category_id)
    );

CREATE TABLE IF NOT EXISTS locations (
                                         location_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                         lat NUMERIC NOT NULL,
                                         lon NUMERIC NOT NULL,
                                         CONSTRAINT pk_locations PRIMARY KEY (location_id)
    );

CREATE TABLE IF NOT EXISTS events (
                                      event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      title VARCHAR(120) NOT NULL,
    annotation VARCHAR(2000) NOT NULL,
    description VARCHAR(7000) NOT NULL,
    created_on TIMESTAMP,
    event_date TIMESTAMP NOT NULL,
    category_id BIGINT NOT NULL,
    location_id BIGINT NOT NULL,
    initiator_id BIGINT NOT NULL,
    paid BOOLEAN,
    participant_limit INTEGER DEFAULT 0,
    published_on TIMESTAMP,
    request_moderation BOOLEAN DEFAULT TRUE,
    state VARCHAR
    );

CREATE TABLE IF NOT EXISTS requests (
                                        request_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                        event_id BIGINT NOT NULL,
                                        requester_id BIGINT NOT NULL,
                                        status VARCHAR(64),
    created TIMESTAMP,
    CONSTRAINT pk_requests PRIMARY KEY (request_id)
    );

CREATE TABLE IF NOT EXISTS compilations (
                                            compilation_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                            title VARCHAR(50) NOT NULL,
    pinned BOOLEAN NOT NULL,
    CONSTRAINT pk_compilations PRIMARY KEY (compilation_id)
    );

CREATE TABLE IF NOT EXISTS compilation_events (
    compilation_id BIGINT NOT NULL REFERENCES compilations(compilation_id),
    event_id BIGINT NOT NULL REFERENCES events(event_id),
    CONSTRAINT pk_compilation_events PRIMARY KEY (compilation_id, event_id)
    );

CREATE TABLE IF NOT EXISTS comments (
                                        comment_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                        text VARCHAR(1024) NOT NULL,
    event_id BIGINT NOT NULL,
    author_id BIGINT NOT NULL,
    created TIMESTAMP,
    CONSTRAINT pk_comments PRIMARY KEY (comment_id)
    );

ALTER TABLE events ADD CONSTRAINT fk_events_categories FOREIGN KEY (category_id) REFERENCES categories (category_id) ON DELETE CASCADE;

ALTER TABLE events ADD CONSTRAINT fk_events_locations FOREIGN KEY (location_id) REFERENCES locations (location_id) ON DELETE CASCADE;

ALTER TABLE events ADD CONSTRAINT fk_events_users FOREIGN KEY (initiator_id) REFERENCES users (user_id) ON DELETE CASCADE;

ALTER TABLE requests ADD CONSTRAINT fk_requests_events FOREIGN KEY (event_id) REFERENCES events (event_id) ON DELETE CASCADE;

ALTER TABLE requests ADD CONSTRAINT fk_requests_users FOREIGN KEY (requester_id) REFERENCES users (user_id) ON DELETE CASCADE;

ALTER TABLE comments ADD CONSTRAINT fk_comments_events FOREIGN KEY (event_id) REFERENCES events (event_id) ON DELETE CASCADE;

ALTER TABLE comments ADD CONSTRAINT fk_comments_users FOREIGN KEY (author_id) REFERENCES users (user_id) ON DELETE CASCADE;